from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import asyncio
from database import CREATE_INSERT, DELETE_TABLE, init_db, close_db
import time
from app.answers import fetch_keys
import app.keyboards as kb
from config import adminDB

router = Router()

checker = kb.teachBtn

class Student(StatesGroup):
    fullname = State()
    step = State() 
    answers = State()
    right_answers = State()

class Teacher(StatesGroup):
    adding = State()
    deleting = State()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏ –∏—Ö –ø–æ–¥—Å—á—ë—Ç
async def get_count_keys():
    keys = await fetch_keys()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    return len(keys)



# for teacher 
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    if message.from_user.id == adminDB:
        await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —É—Å—Ç–æ–∑!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å—è–º–∏ üëá', reply_markup=checker)
    else:
        await message.reply('–ü—Ä–∏–≤–µ—Ç, –Ω–∞–∂–º–∏ –Ω–∞ /check —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∑!  üöÄ')
    await state.clear()
@router.callback_query(F.data == 'addData')
async def addData(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Teacher.adding)
    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å–∏.. ‚úçÔ∏è', reply_markup=kb.addMessage)

@router.callback_query(F.data == 'viewDB')
async def addData(callback: CallbackQuery):
    countKeys = await get_count_keys()
    if countKeys == 0:
        await callback.message.answer(text='–ö–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', reply_markup=kb.onlyAdd)
    else:
        allKeys = await fetch_keys()
        formatted_keys = [f"{i + 1}. {key}" for i, key in enumerate(allKeys)]
        keys_text = '\n'.join(formatted_keys)
        await callback.message.answer(text=f'üîë –ö–ª—é—á–∏ –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \n\n{keys_text}', reply_markup=checker)
    callback.answer()


@router.message(Teacher.adding)
async def finishAdding(message: Message, state: FSMContext):
    await state.update_data(adding=(message.text).upper())
    await init_db()
    await CREATE_INSERT((message.text).upper()) 
    await message.answer('–ó–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã! ‚úÖ\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∂–∞–≤ /check', reply_markup=checker)
    await close_db()
    await state.clear()


@router.callback_query(F.data == 'deleteData')
async def deleteData(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏? ‚ö†Ô∏è', reply_markup=kb.deleteMessage)

@router.callback_query(F.data == 'backData')
async def backData(callback: CallbackQuery, state: FSMContext):
    countKeys = await fetch_keys()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    if countKeys == 0:
        checker = kb.onlyAdd
    else:
        checker = kb.teachBtn
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=checker)
    await state.clear()


@router.callback_query(F.data == 'confirmData')
async def backData(callback: CallbackQuery, state: FSMContext):
    await init_db()
    await DELETE_TABLE()
    await callback.message.answer('–ó–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã! ‚úÖ', reply_markup=kb.onlyAdd)
    callback.answer()
    await close_db()
    await state.clear()
    

# for students

@router.message(Command('check'))
async def checkStart(message: Message, state: FSMContext):
    countKeys = await get_count_keys()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    if countKeys == 0:
        await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç—É!')
    else:
        await state.set_state(Student.fullname)
        await message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û  üí¨:')


@router.message(Student.fullname)
async def start_quiz(message: Message, state: FSMContext):
    await state.update_data(fullname=(message.text).title())
    await state.set_state(Student.step)
    unique_id = str(int(time.time() * 1000))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    await state.update_data(unique_id=unique_id, right_answers=0)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    await message.answer(
        text='–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å <b>1</b> ‚ùì',
        reply_markup=kb.testKeyboard(unique_id),  # –ü–µ—Ä–µ–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        parse_mode='html'
    )


@router.callback_query(F.data.startswith("answer_"), Student.step)
async def process_key(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    step = data.get("step", 0)
    answers = data.get("answers", [])
    fullname = data.get('fullname')
    unique_id = data.get('unique_id')
    right_answers = data.get("right_answers", 0)

    stiker = '‚úÖ'
    answer = callback.data.split("_")[1]
    callback_parts = callback.data.split("_")
    callback_unique_id = callback_parts[2]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ callback_data
    answer = callback_parts[1]  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (A, B, C, D)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if callback_unique_id != unique_id:
        await callback.answer("–≠—Ç–æ —Å—Ç–∞—Ä—ã–π –≤–æ–ø—Ä–æ—Å, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω!", show_alert=True)
        return

    countKeys = await get_count_keys()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    keys = await fetch_keys()
    correct_answer = keys[step] if step < countKeys else None

    if correct_answer and answer == correct_answer:
        right_answers += 1
        answers.append(f"{step + 1}: {answer} ‚Äî ‚úÖ")  # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        stiker = '‚úÖ'
    else:
        answers.append(f"{step + 1}: {answer} ‚Äî ‚ùå")
        stiker = '‚ùå'

    step += 1
    await state.update_data(step=step, answers=answers, right_answers=right_answers)

    await callback.answer()

    if step + 1 < countKeys + 1:
        new_unique_id = str(int(time.time() * 1000))  # –ù–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await state.update_data(unique_id=new_unique_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        await callback.message.edit_text(text=f'–í–æ–ø—Ä–æ—Å <b>{step}</b>\n–í–∞—à –æ—Ç–≤–µ—Ç: {answer} ‚Äî {stiker}', parse_mode='html')
        await callback.message.answer(
            f'–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å <b>{step + 1}</b> ‚ùì',
            reply_markup=kb.testKeyboard(new_unique_id),  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            parse_mode='html')
    else:
        await callback.message.edit_text(text=f'–í–æ–ø—Ä–æ—Å <b>{step}</b>\n–í–∞—à –æ—Ç–≤–µ—Ç: {answer} ‚Äî {stiker}', parse_mode='html')
        results = "\n".join(answers)
        await callback.message.answer(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã <i>{fullname}</i>:\n\n{results}\n\n{right_answers}/{countKeys}", parse_mode='html')
        await state.clear()
